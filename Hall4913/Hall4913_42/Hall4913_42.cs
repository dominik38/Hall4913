using System;
using Microsoft.SPOT;

using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.Interfaces;

namespace Gadgeteer.Modules.SchreiberDominik
{
    public class Hall4913 : GTM.Module
    {
        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The mainboard socket that has the module plugged into it.</param>
        public Hall4913(int socketNumber)
        {
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            socket.EnsureTypeIsSupported(new char[] { 'X', 'Y' }, this);

            // These calls will throw GT.Socket.InvalidSocketException if a pin conflict or error is encountered
            input = new GTI.InterruptInput(socket, Socket.Pin.Three, GTI.GlitchFilterMode.On, GTI.ResistorMode.Disabled, GTI.InterruptMode.RisingAndFallingEdge, this);
            input.Interrupt += (_input_Interrupt);
            led = new GTI.DigitalOutput(socket, GT.Socket.Pin.Four, true, this);
        }

        private void _input_Interrupt(GTI.InterruptInput input, bool value)
        {
            HallSensorState hallSensorState = input.Read() ? HallSensorState.NoDetection : HallSensorState.Detected;
            switch (hallSensorState)
            {
                case HallSensorState.NoDetection:
                    if (LEDMode == LEDModes.OnWhileDetected)
                        TurnLEDOff();
                    else if (LEDMode == LEDModes.OnWhileNoDetection)
                        TurnLEDOn();
                    else if (LEDMode == LEDModes.ToggleWhenDetectionLost)
                        ToggleLED();
                    break;
                case HallSensorState.Detected:
                    if (LEDMode == LEDModes.OnWhileDetected)
                        TurnLEDOn();
                    else if (LEDMode == LEDModes.OnWhileNoDetection)
                        TurnLEDOff();
                    else if (LEDMode == LEDModes.ToggleWhenDetected)
                        ToggleLED();
                    break;
            }
            this.OnHallSensorEvent(this, hallSensorState);
        }

        private GTI.InterruptInput input;
        private GTI.DigitalOutput led;

        /// <summary>
        /// Gets a value that indicates whether the state of this hall sensor is detected.
        /// </summary>
        public bool IsDetected
        {
            get
            {
                return !this.input.Read();
            }
        }

        private bool _isDebugLedEnabled;
        public bool IsDebugLedEnabled
        {
            get
            {
                return _isDebugLedEnabled;
            }
            set
            {
                _isDebugLedEnabled = value;
            }
        }

        /// <summary>
        /// Represents the state of the <see cref="Hall4913"/> object.
        /// </summary>
        public enum HallSensorState
        {
            /// <summary>
            /// The state of hall sensor is Detected.
            /// </summary>
            Detected = 0,
            /// <summary>
            /// The state of hall sensor is NoDetection.
            /// </summary>
            NoDetection = 1
        }

        /// <summary>
        /// Turns on the module's LED.
        /// </summary>
        public void TurnLEDOn()
        {
            led.Write(true);
        }

        /// <summary>
        /// Turns off the module's LED.
        /// </summary>
        public void TurnLEDOff()
        {
            led.Write(false);
        }

        /// <summary>
        /// Toggles the module's LED. If the LED is currently on, it is turned off. If it is currently off, it is turned on.
        /// </summary>
        public void ToggleLED()
        {
            if (IsLedOn)
                TurnLEDOff();
            else
                TurnLEDOn();
        }

        /// <summary>
        /// Gets a boolean value that indicates whether the module's LED is currently lit (true = lit, false = off).
        /// </summary>
        public bool IsLedOn
        {
            get
            {
                return led.Read();
            }
        }

        /// <summary>
        /// Enuerates the various modes a LED can be set to.
        /// </summary>
        public enum LEDModes
        {
            /// <summary>
            /// The LED is on regardless of the Hall sensor state.
            /// </summary>
            On,
            /// <summary>
            /// The LED is off regardless of the hall sensor state.
            /// </summary>
            Off,
            /// <summary>
            /// The LED changes state whenever a magnet is detected.
            /// </summary>
            ToggleWhenDetected,
            /// <summary>
            /// The LED changes state whenever magnet detection lost.
            /// </summary>
            ToggleWhenDetectionLost,
            /// <summary>
            ///  The LED is on while a magnet is detected.
            /// </summary>
            OnWhileDetected,
            /// <summary>
            /// The LED is on while no magnet is detected.
            /// </summary>
            OnWhileNoDetection
        }

        private LEDModes _ledMode;

        /// <summary>
        /// Gets or sets the LED's current mode of operation.
        /// </summary>
        public LEDModes LEDMode
        {
            get
            {
                return _ledMode;
            }
            set
            {
                _ledMode = value;

                if (_ledMode == LEDModes.On || _ledMode == LEDModes.OnWhileDetected && IsDetected || _ledMode == LEDModes.OnWhileNoDetection && !IsDetected)
                    TurnLEDOn();
                else if (_ledMode == LEDModes.Off || _ledMode == LEDModes.OnWhileNoDetection && IsDetected || _ledMode == LEDModes.OnWhileDetected && !IsDetected)
                    TurnLEDOff();
            }

        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="MagnetDetectionLost"/>
        /// and <see cref="MagnetDetected"/> events.
        /// </summary>
        /// <param name="sender">The <see cref="Hall4913"/> object that raised the event.</param>
        /// <param name="state">The state of the Hall4913</param>
        public delegate void HallSensorEventHandler(Hall4913 sender, HallSensorState state);

        /// <summary>
        /// Raised when the state of <see cref="Hall4913"/> is NoDetection.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="MagnetDetected"/> event handler
        /// when you want to provide an action associated with hall sensor activity.
        /// The state of the Hall4913 is passed to the <see cref="HallSensorEventHandler"/> delegate,
        /// so you can use the same event handler for both hall sensor states.
        /// </remarks>
        public event HallSensorEventHandler MagnetDetectionLost;

        /// <summary>
        /// Raised when the state of <see cref="Hall4913"/> is Detected.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="MagnetDetectionLost"/> event handler
        /// when you want to provide an action associated with hall sensor activity.
        /// Since the state of the hall sensor is passed to the <see cref="HallSensorEventHandler"/> delegate,
        /// you can use the same event handler for both hall sensor states.
        /// </remarks>
        public event HallSensorEventHandler MagnetDetected;

        private HallSensorEventHandler onHallSensor;

        /// <summary>
        /// Raises the <see cref="MagnetDetectionLost"/> or <see cref="MagnetDetected"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Hall4913"/> that raised the event.</param>
        /// <param name="Hall4913">The state of the hall sensor.</param>
        protected virtual void OnHallSensorEvent(Hall4913 sender, HallSensorState hallSensorState)
        {
            if (this.onHallSensor == null)
            {
                this.onHallSensor = new HallSensorEventHandler(this.OnHallSensorEvent);
            }

            if (Program.CheckAndInvoke((hallSensorState == HallSensorState.NoDetection ? this.MagnetDetectionLost : this.MagnetDetected), this.onHallSensor, sender, hallSensorState))
            {
                switch (hallSensorState)
                {
                    case HallSensorState.NoDetection:
                        this.MagnetDetectionLost(sender, hallSensorState);
                        break;
                    case HallSensorState.Detected:
                        this.MagnetDetected(sender, hallSensorState);
                        break;
                }

            }
        }
    }
}
